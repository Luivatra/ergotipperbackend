/*
 * Ergo Explorer API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ergolui.ergotipperbackend.explorer.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * BoxQuery
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-05T14:07:15.709Z[GMT]")
public class BoxQuery {
  @SerializedName("ergoTreeTemplateHash")
  private String ergoTreeTemplateHash = null;

  @SerializedName("registers")
  private Map<String, String> registers = null;

  @SerializedName("constants")
  private Map<String, String> constants = null;

  @SerializedName("assets")
  private List<String> assets = null;

  public BoxQuery ergoTreeTemplateHash(String ergoTreeTemplateHash) {
    this.ergoTreeTemplateHash = ergoTreeTemplateHash;
    return this;
  }

   /**
   * SHA-256 hash of ErgoTree template this box script should have
   * @return ergoTreeTemplateHash
  **/
  @Schema(required = true, description = "SHA-256 hash of ErgoTree template this box script should have")
  public String getErgoTreeTemplateHash() {
    return ergoTreeTemplateHash;
  }

  public void setErgoTreeTemplateHash(String ergoTreeTemplateHash) {
    this.ergoTreeTemplateHash = ergoTreeTemplateHash;
  }

  public BoxQuery registers(Map<String, String> registers) {
    this.registers = registers;
    return this;
  }

  public BoxQuery putRegistersItem(String key, String registersItem) {
    if (this.registers == null) {
      this.registers = new HashMap<String, String>();
    }
    this.registers.put(key, registersItem);
    return this;
  }

   /**
   * Pairs of (register ID, register value) this box should contain
   * @return registers
  **/
  @Schema(description = "Pairs of (register ID, register value) this box should contain")
  public Map<String, String> getRegisters() {
    return registers;
  }

  public void setRegisters(Map<String, String> registers) {
    this.registers = registers;
  }

  public BoxQuery constants(Map<String, String> constants) {
    this.constants = constants;
    return this;
  }

  public BoxQuery putConstantsItem(String key, String constantsItem) {
    if (this.constants == null) {
      this.constants = new HashMap<String, String>();
    }
    this.constants.put(key, constantsItem);
    return this;
  }

   /**
   * Pairs of (constant index, constant value) this box should contain
   * @return constants
  **/
  @Schema(description = "Pairs of (constant index, constant value) this box should contain")
  public Map<String, String> getConstants() {
    return constants;
  }

  public void setConstants(Map<String, String> constants) {
    this.constants = constants;
  }

  public BoxQuery assets(List<String> assets) {
    this.assets = assets;
    return this;
  }

  public BoxQuery addAssetsItem(String assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<String>();
    }
    this.assets.add(assetsItem);
    return this;
  }

   /**
   * IDs of tokens returned boxes should contain
   * @return assets
  **/
  @Schema(description = "IDs of tokens returned boxes should contain")
  public List<String> getAssets() {
    return assets;
  }

  public void setAssets(List<String> assets) {
    this.assets = assets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxQuery boxQuery = (BoxQuery) o;
    return Objects.equals(this.ergoTreeTemplateHash, boxQuery.ergoTreeTemplateHash) &&
        Objects.equals(this.registers, boxQuery.registers) &&
        Objects.equals(this.constants, boxQuery.constants) &&
        Objects.equals(this.assets, boxQuery.assets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ergoTreeTemplateHash, registers, constants, assets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxQuery {\n");
    
    sb.append("    ergoTreeTemplateHash: ").append(toIndentedString(ergoTreeTemplateHash)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    constants: ").append(toIndentedString(constants)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
